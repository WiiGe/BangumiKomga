import json
from xml.etree.ElementTree import Element, SubElement, tostring
import xml.dom.minidom
from datetime import datetime
from tools.env import InitEnv


def generate_comic_info(json_data):
    # 创建根元素
    comic_info = Element('ComicInfo')
    comic_info.set('xmlns:xsd', 'http://www.w3.org/2001/XMLSchema')
    comic_info.set('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance')

    # 获取标题
    title = json_data['metadata']['title']

    # Title字段
    title_elem = SubElement(comic_info, 'Title')
    title_elem.text = title

    # Notes字段（使用文件最后修改时间）
    notes_elem = SubElement(comic_info, 'Notes')
    file_modified = datetime.strptime(
        json_data['fileLastModified'], '%Y-%m-%dT%H:%M:%SZ')
    notes_elem.text = f'Generated by BangumiKomga on {file_modified.isoformat()}'

    # 日期处理
    if json_data['metadata']['releaseDate']:
        release_date = datetime.strptime(
            json_data['metadata']['releaseDate'], '%Y-%m-%d')
        year_elem = SubElement(comic_info, 'Year')
        year_elem.text = str(release_date.year)

        month_elem = SubElement(comic_info, 'Month')
        month_elem.text = str(release_date.month)

        day_elem = SubElement(comic_info, 'Day')
        day_elem.text = str(release_date.day)

    # 作者信息
    # TODO: 将所有作者信息填入
    if json_data['metadata']['authors']:
        writer_elem = SubElement(comic_info, 'Writer')
        writer_elem.text = json_data['metadata']['authors'][0]['name']

    # 标签处理
    if json_data['metadata']['tags']:
        tags_elem = SubElement(comic_info, 'Tags')
        tags_elem.text = ','.join(json_data['metadata']['tags'])

    # 网络链接
    # TODO: 将所有链接填入
    if json_data['metadata']['links']:
        web_elem = SubElement(comic_info, 'Web')
        web_elem.text = json_data['metadata']['links'][0]['url']

    # 页数统计
    page_count_elem = SubElement(comic_info, 'PageCount')
    page_count_elem.text = str(json_data['media']['pagesCount'])

    # 语言设置
    # TODO: 根据文件名判断
    language_elem = SubElement(comic_info, 'LanguageISO')
    language_elem.text = 'zh'

    # 格式设置
    format_elem = SubElement(comic_info, 'Format')
    format_elem.text = 'Digital'

    # 漫画方向
    manga_elem = SubElement(comic_info, 'Manga')
    manga_elem.text = 'Yes'

    # 页面信息
    pages_elem = SubElement(comic_info, 'Pages')
    for i in range(1, json_data['media']['pagesCount'] + 1):
        page_elem = SubElement(pages_elem, 'Page')
        page_elem.set('Image', str(i))
        # FIXME: 尚无手段获取每页的具体尺寸
        # page_elem.set('ImageWidth', '1280')
        # page_elem.set('ImageHeight', '904')

    return comic_info


def prettify_comic_info(elem):
    """调整XML元素格式"""
    rough_string = tostring(elem, 'utf-8')
    reparsed = xml.dom.minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ")


def generate_eze_info(json_data):
    """
    将Komga的JSON转换为eze info.json格式
    """
    # 解析创建日期
    release_date = datetime.strptime(
        json_data['metadata']['releaseDate'], '%Y-%m-%d')

    # 提取链接信息
    links = json_data['metadata'].get('links', [])

    # 构建tags对象
    tags = {
        "tag": json_data['metadata'].get('tags', []),
        # FIXME: 假设固定值, 也许需要从文件名或其他字段确定原本的语言
        "language": [],
        # 假设固定值，可根据需要修改
        "category": ["manga"],
        "artist": [author['name'] for author in json_data['metadata']['authors']],
        "group": []  # komga似乎没有该字段, 也许该填Publisher? 或是删去
    }

    # 添加翻译状态
    # FIXME: 只是关注了 translated 字样, 也许需要从文件名或其他字段确定是否已经翻译
    if "translated" not in tags["tag"]:
        tags["tag"].append("translated")

    # 上传日期取元数据中的发布日期
    upload_date = [
        release_date.year,
        release_date.month,
        release_date.day,
    ]

    # 构建最终JSON结构
    return {
        "gallery_info": {
            "title": json_data['metadata']['title'],
            "title_original": json_data['name'],
            "link": links,
            "category": "manga",
            "tags": tags,
            "language": "chinese",  # 假设固定值中文
            "translated": True,
            "upload_date": upload_date,
            "source": {
                # FIXME: 尚未实现
            }
        }
    }


def save_comic_info_to_file(json_input):
    comic_xml = generate_comic_info(json_input)
    # 格式化输出
    xml_str = prettify_comic_info(comic_xml)
    # 保存到文件
    with open('ComicInfo.xml', 'w', encoding='utf-8') as f:
        f.write(xml_str)
    # 输出提示
    print(f"书籍 {json_input['id']} 的 ComicInfo.xml 已成功生成！")


def save_eze_info_to_file(json_input):
    info_json = generate_eze_info(json_input)
    # 保存到文件
    with open('info.json', 'w', encoding='utf-8') as f:
        f.write(json.dumps(info_json, ensure_ascii=False))
    # 输出提示
    print(f"书籍 {json_input['id']} 的 info.json 已成功生成！")


if __name__ == '__main__':
    # 您提供的JSON数据
    env = InitEnv()
    komga = env.komga
    json_input = komga.get_book_metadata("0M9Z5S7QS6514")
    save_comic_info_to_file(json_input)
    save_eze_info_to_file(json_input)
